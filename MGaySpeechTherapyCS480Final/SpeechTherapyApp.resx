<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIBoAAAEAIACQDQAAFgAAACgAAAAgAAAANAAAAAEAIAAAAAAAAA0AAAAAAAAAAAAAAAAAAAAA
        AACat8drmrfHbJq3x2ybuMdsi6TNdD9L7MY9R+rVQErm3kVS67aWssltmrfHbJq3x2yat8dsmrfHbJq3
        x2yat8dsmrfHbJq3x2yat8dsl7TIbklX6LU7Re3PRE7j30FN6cmJo852m7jHbJq3x22at8c5AAAAAAAA
        AAAAAAAAAAAAAJq3xwWat8cFmrfHBZu4xwVwhdgIN0LvKHmBqlOlq37XmaCKdrG9hBE3kf8Bb6b/ApGz
        3wSYts0FmbfJBZm3yQWYtswFlbXVBImw9ANBfv8CO0XsKo2Ulo2coofIVl/PQGV43QmbuMcFmrfHBZq3
        xwMAAAAAAAAAAAAAAAAAAAAAmrfHAJq3xwCat8cAm7jHAFts3gBASuUA//8DBMPIX6zCx2D0wcZht8HG
        YWTBxmErwcZgD8LGXgTGyFQBxchWAcLGXgPBxmAKwcZhGMHGYTvDyF+Fw8hf6MPIX675/CgHsbd0AL/F
        ZgC/xWcAobq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBxmEAwcZhAMHGYQLBxmEmwcZhzcHG
        Yf/BxmH/wcZh/sHGYejBxmHKwcZhscHGYaTBxmGlwcZhrsHGYcDBxmHXwcZh8cHGYf/BxmH/wcZh9sHG
        YWnBxmExwcZhPcHGYR/BxmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMHGYQDBxmFHwcZhpMHG
        YdTBxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HG
        Yf/BxmH/wcZh7sHGYeHBxmHIwcZhO8HGYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwcZhEMHG
        YXfBxmH0wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HG
        Yf/BxmH/wcZh/8HGYf/BxmH/wcZhtcHGYTTBxmEBwcZhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADBxmETwcZhR8HGYdPBxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HG
        Yf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmGJwcZhAMHGYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMHGYQDBxmEjwcZh5MHGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HG
        Yf/BxmH/wsdg/8PIX//DyF//w8hf/8LHYf/BxmH/wcZh/8HGYarBxmEDAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMHGYU7BxmH6wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HG
        Yf/BxmH/wsdg/8HGYf+3vWz/qK58/5uhh/+WmoT/srZr/8LHYf/BxmH/wcZhvcHGYQgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwcZhbMHGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HG
        Yf/BxmH/wcZh/8LHYP+wtXP/dHqr/1BUxP8+P8L/NTCz/1ROlv+wtGn/wsdh/8HGYf/BxmHGwcZhDAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBxmFiwcZh/sHGYf/BxmH/wcZh/8HG
        Yf/BxmH/wcZh/8HGYf/BxmH/wsdg/3mBqf8wO8r/MCqi/y8hl/9CN47/oaJs/8PIYP/BxmH/wcZh/8HG
        YcXBxmEMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMHGYT/BxmH1wcZh/8HG
        Yf/BxmH/wcZh/8HGYf/BxmH/wsdh/8LHYf/DyF//eYCr/zFJ1f8xTbL/Nz2g/46OdP/DyGH/wsdi/8LH
        Yf/BxmH/wcZhucHGYQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwcZhGcHG
        YdbBxmH/wcZh/8HGYf/BxmH/wcZh/7zBX/+wtFr/tblc/8PIX/+WnY7/OEne/y9Vvf9Qb6b/ucBl/7W5
        XP+rr1n/ub1e/8HGYf/BxmGdwcZhASAfIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADBxmECwcZhmMHGYf/BxmH/wcZh/8HGYf/Cx2H/sLRa/5OWT/+Mj03/lJhP/7S5af9YY8j/Lk/H/2F8
        l/+Ul1D/jI9N/5eaUf+xtVv/wsdh/sHGYWo7Oy4AIB8jACAfIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMHGYQDBxmFGwcZh9MHGYf/BxmH/wcZh/8HGYf/BxmH/wsdh/8HGYf+bn1L/mJxP/5ac
        jv84Usz/U2Z6/56hUf/AxWH/w8hi/8LHYf/BxmHjxstjJxkYIBUgHyNLIB8jAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMHGYQvBxmG0wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/77D
        YP+VmFD/uL1j/219pf+DkXj/wsdf/8HGYf/BxmH/wcZh/sHGYYfy93YCHx4jHiAfI5QgHyMJIB8jACAf
        IwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwcZhAMHGYUbBxmHwwcZh/8HGYf/BxmH/wcZh/8HG
        Yf/BxmH/wcZh/77DYP/BxmD/tLts/7e+av/Cx2H/wcZh/8HGYf/BxmHIwcZhHd/lbgAgHyMdIB8jkyAf
        IwkgHyMkIB8jCwAAAAAgHyMAAAAAAAAAAAAAAAAAAAAAAAAAAADBxmEAwcZhBcHGYYXBxmH8wcZh/8HG
        Yf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/Cx2D/wcZh/8HGYf/BxmH/wcZh3sHGYT3AxWEAIB8jACAf
        I0YgHyOAIB8jAiAfI4MgHyMtIB8jACAfIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBxmEAwcZhDsHG
        YYnBxmHzwcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYdnBxmFGRkcyACEg
        IwAgHyMcIB8jmSAfIzQgHyMBIB8jjSAfIyogHyMDIB8jUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADBxmEAwcZhBsHGYVbBxmHHwcZh/MHGYf/BxmH/wcZh/8HGYf/BxmH/wcZh/8HGYfzBxmG4wcZhM8HG
        YQAfHiMRIB8jWyAfI5ogHyNTIB8jASAfIxYgHyOXIB8jEyAfIwYgHyOnAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADBxmEAwcZhAMHGYRbBxmFjwcZhusHGYe/BxmH/wcZh/8HGYf/BxmHxwcZhdcHG
        YRLBxmEAwcZhACAfIx0gHyNiIB8jKSAfIwAgHyMAIB8jaSAfI28gHyMBIB8jESAfI6oAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBxmEAwcZhAMHGYQDBxmELwcZhO8HGYb3BxmHxwcZhxsHG
        YdPBxmEiwcZhAMHGYQAAAAAAIB8jACAfIwAgHyMAIB8jDiAfI1wgHyOUIB8jFCAfIwAgHyNDIB8jlgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwcZhAMHGYQDBxmEJwcZhW8HG
        YafBxmFwwcZhasHGYQ0AAAAAAAAAAAAAAAAAAAAAIB8jRCAfI4AgHyOVIB8jfiAfIxsgHyMAIB8jESAf
        I5UgHyM9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMHG
        YQXBxmELwcZhe8HGYTLBxmEKwcZhAAAAAAAAAAAAAAAAAAAAAAAgHyMlIB8jOiAfIx4gHyMBIB8jACAf
        Iw4gHyODIB8jZyAfIwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAwcZhAMHGYQTBxmEpwcZhA8HGYQDBxmEAAAAAAAAAAAAAAAAAAAAAACAfIwAgHyMAIB8jBiAf
        IxEgHyM+IB8jkSAfI2sgHyMHIB8jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwcZhAMHGYQDBxmEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAf
        I0EgHyOkIB8jqCAfI5ggHyNFIB8jAiAfIwAAAAAAAAAADwAAAA/8AAD/+AAAH/AAAB/gAAAf4AAAf/AA
        AD/wAAA/8AAAP/AAAD/wAAA/8AAAP/AAAH/4AAAP+AAAD/wAAIP8AAGD/gADAP8ABAD/wAxg//AfhP/4
        Hgj/+D4Q//x/gf///wM=
</value>
  </data>
</root>